# This is a basic configuration file, which contains boilerplate options and
# some basic examples. It allows the BIRD daemon to start but will not cause
# anything else to happen.
#
# Please refer to the BIRD User's Guide documentation, which is also available
# online at http://bird.network.cz/ in HTML format, for more information on
# configuring BIRD and adding routing protocols.

# Configure logging
log syslog all;
# log "/var/log/bird.log" { debug, trace, info, remote, warning, error, auth, fatal, bug };

# Set router ID. It is a unique identification of your router, usually one of

# IPv4 addresses of the router. It is recommended to configure it explicitly.
router id 192.168.0.157;

# The Device protocol is not a real routing protocol. It does not generate any
# routes and it only serves as a module for getting information about network
# interfaces from the kernel. It is necessary in almost any configuration.
protocol device {
}

# The direct protocol is not a real routing protocol. It automatically generates
# direct routes to all network interfaces. Can exist in as many instances as you
# wish if you want to populate multiple routing tables with direct routes.
protocol direct {
        interface "dummy0";
        ipv4;                   # Connect to default IPv4 table
        ipv6;                   # ... and to default IPv6 table
}

# The Kernel protocol is not a real routing protocol. Instead of communicating
# with other routers in the network, it performs synchronization of BIRD
# routing tables with the OS kernel. One instance per table.
protocol kernel {
        ipv4 {                  # Connect protocol to IPv4 table by channel
              table master4;    # Default IPv4 table is master4
              import all;       # Import to table, default is import all
              export all;       # Export to protocol. default is export none
        };
}

# Another instance for IPv6, skipping default options
protocol kernel {
        ipv6 { export all; };
}

# Static routes (Again, there can be multiple instances, for different address
# families and to disable/enable various groups of static routes on the fly).
protocol static {
        ipv4;                   # Again, IPv4 channel with default options
}

# BGP example, explicit name 'uplink1' is used instead of default 'bgp1'
protocol bgp uplink1 {
        description "BGP dummy0 uplink";
        local as 64496;
        neighbor 192.168.0.105 as 65000;
        source address 192.168.0.157;
        ipv4 {                  # regular IPv4 unicast (1/1)
                table master4;
                import all;
                export filter {
                  if net ~ [ 192.168.0.0/24+ ] then accept;
                  reject;
                };
        };

        ipv4 multicast {        # IPv4 multicast topology (1/2)
                table master4;    # explicit IPv4 table
                import filter rt_import;
                export all;
        };
}
